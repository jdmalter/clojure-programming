cmdhistory=["foo" "foo()" "(foo)" "(foo \\"Something\\")" "(foo \\"Here is an arg\\")" "\#'user/foo" "(ns clojure-programming.core)\\r\\n\\r\\n(defn foo\\r\\n  \\"I don't do a whole lot.\\"\\r\\n  [x]\\r\\n  (println x \\"Hello, World\!\\"))" "(foo \\"test\\")" "(ns clojure-programming.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [clojure-programming.core \:refer \:all]))\\r\\n\\r\\n(deftest a-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= 0 1))))" "(a-test)" "(ns chapter_one)\\r\\n\\r\\n(defn foo\\r\\n  \\"I don't do a whole lot.\\"\\r\\n  [x]\\r\\n  (println x \\"Hello, World\!\\"))" "(foo \\"\\")" "(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + number) (count numbers))" "(ns chapter_one.core)\\r\\n\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + number) (count numbers))" "(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + number) (count numbers)))" "(ns chapter_one.core)\\r\\n\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + number) (count numbers)))" "(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))" "(ns chapter_one.core)\\r\\n\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n(average [60 80 100 400])" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n(deftest average\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))" "(average-test)" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 161))))" "(average-test)" "(ns chapter_one.core)\\r\\n\\r\\n; Takes the average of some numbers\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n(read-string \\"42\\")\\r\\n\\r\\n(read-string \\"(+ 1 2)\\")" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") \\"42\\"))))" "(read-string-test)" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))" "(read-string-test\\n  )" "(read-string-test)" "(ns chapter_one.core)\\r\\n\\r\\n; Takes the average of some numbers\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n; Read a string and return a literal\\r\\n(read-string \\"42\\")\\r\\n\\r\\n; Read a string a return a string literal\\r\\n(pr-str [1 2 3])" "(pr-str [1 2 3])" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))" "()(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))" "(pr-str-test)" "(ns chapter_one.core)\\r\\n\\r\\n; Takes the average of some numbers\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n; Read a string and return a literal\\r\\n(read-string \\"42\\")\\r\\n\\r\\n; Read a string a return a string literal\\r\\n(pr-str [1 2 3])\\r\\n\\r\\n; Declare a string literal\\r\\n\\"hello world\!\\"\\r\\n\\r\\n; Declare a multiline string literal\\r\\n\\"multiline stings\\r\\nare easy to declare\\"" "\\"multiline stings\\r\\nare easy to declare\\"" "(ns chapter_one.core)\\r\\n\\r\\n; Takes the average of some numbers\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n; Read a string and return a literal\\r\\n(read-string \\"42\\")\\r\\n\\r\\n; Read a string a return a string literal\\r\\n(pr-str [1 2 3])\\r\\n\\r\\n; Declare a string literal\\r\\n\\"hello world\!\\"\\r\\n\\r\\n; Declare a multiline string literal\\r\\n\\"multiline stings\\r\\nare easy to declare\\"\\r\\n\\r\\n; Declare a character literal\\r\\n(class \\\\c)" "(ns chapter_one.core)\\r\\n\\r\\n; Takes the average of some numbers\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n; Read a string and return a literal\\r\\n(read-string \\"42\\")\\r\\n\\r\\n; Read a string a return a string literal\\r\\n(pr-str [1 2 3])\\r\\n\\r\\n; Declare a string literal\\r\\n\\"hello world\!\\"\\r\\n\\r\\n; Declare a multiline string literal\\r\\n\\"multiline stings\\r\\nare easy to declare\\"\\r\\n\\r\\n; Declare some character literal\\r\\n(class \\\\c)\\r\\n\\\\u00ff\\r\\n\\\\o41" "(def person {\:name \\"Jacob Malter\\"\\r\\n             \:city \\"Raleigh, NC\\"})" "(\:city person)" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))" "(keyword-test)" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:user/location) \\"35.779385, -78.675592\\"))))" "(namespace-test)" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:user/location calzones) \\"35.779385, -78.675592\\"))))" "(ns chapter_one.core)\\r\\n\\r\\n; Takes the average of some numbers\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n; Read a string and return a literal\\r\\n(read-string \\"42\\")\\r\\n\\r\\n; Read a string a return a string literal\\r\\n(pr-str [1 2 3])\\r\\n\\r\\n; Declare a string literal\\r\\n\\"hello world\!\\"\\r\\n\\r\\n; Declare a multiline string literal\\r\\n\\"multiline stings\\r\\nare easy to declare\\"\\r\\n\\r\\n; Declare some character literal\\r\\n(class \\\\c) ;\= java.lang.Character\\r\\n\\\\u00ff ;\= \\\\\u00FF\\r\\n\\\\o41 ;\= \\\\\!\\r\\n\\r\\n; Declare a keyword which evaluates to itself\\r\\n(def person {\:name \\"Jacob Malter\\"\\r\\n             \:city \\"Raleigh, NC\\"})\\r\\n\\r\\n; Declare two keywords with the same name but in different namespaces\\r\\n(def calzones {\:name \\"DP Dough\\"\\r\\n               \:location \\"Raleigh, NC\\"\\r\\n               \:\:location \\"35.779385, -78.675592\\"}) ; every tuesday" "(namespace-test)" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:user/location calzones) \\"35.779385, -78.675592\\"))))" "(namespace-test)" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:/location calzones) \\"35.779385, -78.675592\\"))))" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:chapter_one.core-test/location calzones) \\"35.779385, -78.675592\\"))))" "(namespace-test\\n  )" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:chapter_one/location calzones) \\"35.779385, -78.675592\\"))))" "(namespace-test)" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:chapter_one.core/location calzones) \\"35.779385, -78.675592\\"))))" "(namespace-test)" "(ns chapter_one.core)\\r\\n\\r\\n; Takes the average of some numbers\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n; Read a string and return a literal\\r\\n(read-string \\"42\\")\\r\\n\\r\\n; Read a string a return a string literal\\r\\n(pr-str [1 2 3])\\r\\n\\r\\n; Declare a string literal\\r\\n\\"hello world\!\\"\\r\\n\\r\\n; Declare a multiline string literal\\r\\n\\"multiline stings\\r\\nare easy to declare\\"\\r\\n\\r\\n; Declare some character literal\\r\\n(class \\\\c) ;\= java.lang.Character\\r\\n\\\\u00ff ;\= \\\\\u00FF\\r\\n\\\\o41 ;\= \\\\\!\\r\\n\\r\\n; Declare a keyword which evaluates to itself\\r\\n(def person {\:name \\"Jacob Malter\\"\\r\\n             \:city \\"Raleigh, NC\\"})\\r\\n\\r\\n; Declare two keywords with the same name but in different namespaces\\r\\n(def calzones {\:name \\"DP Dough\\"\\r\\n               \:location \\"Raleigh, NC\\"\\r\\n               \:\:location \\"35.779385, -78.675592\\"}) ; every tuesday\\r\\n\\r\\n; Declare a regex\\r\\n(def regex \#\\"(\\\\d+)-(\\\\d+)\\")\\r\\n(class regex)" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:chapter_one.core/location calzones) \\"35.779385, -78.675592\\"))))\\r\\n\\r\\n; Check that regex has been declared\\r\\n(deftest regex-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (re-seq regex \\"1-3\\") \\"([\\"1-3\\" \\"1\\" \\"3\\"])\\"))))" "(deftest regex-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (re-seq regex \\"1-3\\") \\"([\\"1-3\\" \\"1\\" \\"3\\"])\\"))))" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:chapter_one.core/location calzones) \\"35.779385, -78.675592\\"))))\\r\\n\\r\\n; Check that regex has been declared\\r\\n(deftest regex-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (re-seq regex \\"1-3\\") \\"([\\"1-3\\" \\"1\\" \\"3\\"])\\"))))" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:chapter_one.core/location calzones) \\"35.779385, -78.675592\\"))))\\r\\n\\r\\n; Check that regex has been declared\\r\\n(deftest regex-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (re-seq regex \\"1-3\\") \\"([1-3 1 3])\\"))))" "(regex-test)" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:chapter_one.core/location calzones) \\"35.779385, -78.675592\\"))))\\r\\n\\r\\n; Check that regex has been declared\\r\\n(deftest regex-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (re-seq regex \\"1-3\\") \\"([\\\\\\"1-3\\\\\\" \\\\\\"1\\\\\\" \\\\\\"3\\\\\\"])\\"))))" "(regex-test)" "(deftest regex-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (re-seq regex \\"1-3\\") \\"([\\"1-3\\" \\"1\\" \\"3\\"])\\"))))" "(deftest regex-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (re-seq regex \\"1-3\\") \\"([\\\\\\"1-3\\\\\\" \\\\\\"1\\\\\\" \\\\\\"3\\\\\\"])\\"))))" "(regex-test)" "(re-seq regex \\"1-3\\")" "(deftest regex-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (re-seq regex \\"1-3\\") \\"([\\"1-3\\" \\"1\\" \\"3\\"])\\"))))" "(deftest regex-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (re-seq regex \\"1-3\\") \\"([\\"\\"1-3\\"\\" \\"\\"1\\"\\" \\"\\"3\\"\\"])\\"))))" "(regex-test)" "(deftest regex-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (re-seq regex \\"1-3\\") \\"([\\"\\\\1\\\\-\\\\3\\" \\"\\\\1\\" \\"\\\\3\\"])\\"))))" "(regex-test)" "(deftest regex-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (re-seq regex \\"1-3\\") ([\\"1-3\\" \\"1\\" \\"3\\"])))))" "(regex-test)" "(deftest regex-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (re-seq regex \\"1-3\\") \\\\\\"([\\"1-3\\" \\"1\\" \\"3\\"])\\\\\\"))))" "(regex-test)" "([\\"1-3\\" \\"1\\" \\"3\\"])" "([1-3 1 3])" "\\n\\"([\\"1-3\\" \\"1\\" \\"3\\"])\\"" "\\"([\\\\\\"1-3\\\\\\" \\\\\\"1\\\\\\" \\\\\\"3\\\\\\"])\\"" "(ns chapter_one.core)\\r\\n\\r\\n; Takes the average of some numbers\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n; Read a string and return a literal\\r\\n(read-string \\"42\\")\\r\\n\\r\\n; Read a string a return a string literal\\r\\n(pr-str [1 2 3])\\r\\n\\r\\n; Declare a string literal\\r\\n\\"hello world\!\\"\\r\\n\\r\\n; Declare a multiline string literal\\r\\n\\"multiline stings\\r\\nare easy to declare\\"\\r\\n\\r\\n; Declare some character literal\\r\\n(class \\\\c) ;\= java.lang.Character\\r\\n\\\\u00ff ;\= \\\\\u00FF\\r\\n\\\\o41 ;\= \\\\\!\\r\\n\\r\\n; Declare a keyword which evaluates to itself\\r\\n(def person {\:name \\"Jacob Malter\\"\\r\\n             \:city \\"Raleigh, NC\\"})\\r\\n\\r\\n; Declare two keywords with the same name but in different namespaces\\r\\n(def calzones {\:name \\"DP Dough\\"\\r\\n               \:location \\"Raleigh, NC\\"\\r\\n               \:\:location \\"35.779385, -78.675592\\"}) ; every tuesday\\r\\n\\r\\n; Declare a regex\\r\\n(def regex \#\\"(\\\\d+)-(\\\\d+)\\")\\r\\n(class regex)" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:chapter_one.core/location calzones) \\"35.779385, -78.675592\\"))))\\r\\n\\r\\n; Check that regex has been declared\\r\\n(deftest regex-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (re-seq regex \\"1-3\\") \\"([\\\\\\"1-3\\\\\\" \\\\\\"1\\\\\\" \\\\\\"3\\\\\\"])\\"))))" "(regex-test)" " (is (\= (re-seq regex \\"1-3\\") \\"([\\\\\\"1-3\\\\\\" \\\\\\"1\\\\\\" \\\\\\"3\\\\\\"])\\"))" " \\n (\= (re-seq regex \\"1-3\\") \\"([\\\\\\"1-3\\\\\\" \\\\\\"1\\\\\\" \\\\\\"3\\\\\\"])\\")" "(re-seq regex \\"1-3\\")" "\\"([\\\\\\"1-3\\\\\\" \\\\\\"1\\\\\\" \\\\\\"3\\\\\\"])\\"" "([\\\\\\"1-3\\\\\\" \\\\\\"1\\\\\\" \\\\\\"3\\\\\\"])" "([\\"1-3\\" \\"1\\" \\"3\\"])" "(ns chapter_one.core)\\r\\n\\r\\n; Takes the average of some numbers\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n; Read a string and return a literal\\r\\n(read-string \\"42\\")\\r\\n\\r\\n; Read a string a return a string literal\\r\\n(pr-str [1 2 3])\\r\\n\\r\\n; Declare a string literal\\r\\n\\"hello world\!\\"\\r\\n\\r\\n; Declare a multiline string literal\\r\\n\\"multiline stings\\r\\nare easy to declare\\"\\r\\n\\r\\n; Declare some character literal\\r\\n(class \\\\c) ;\= java.lang.Character\\r\\n\\\\u00ff ;\= \\\\\u00FF\\r\\n\\\\o41 ;\= \\\\\!\\r\\n\\r\\n; Declare a keyword which evaluates to itself\\r\\n(def person {\:name \\"Jacob Malter\\"\\r\\n             \:city \\"Raleigh, NC\\"})\\r\\n\\r\\n; Declare two keywords with the same name but in different namespaces\\r\\n(def calzones {\:name \\"DP Dough\\"\\r\\n               \:location \\"Raleigh, NC\\"\\r\\n               \:\:location \\"35.779385, -78.675592\\"}) ; every tuesday\\r\\n\\r\\n; Declare a regex\\r\\n(def regex \#\\"(\\\\d+)-(\\\\d+)\\")\\r\\n(class regex)\\r\\n(re-seq regex \\"1-3\\")" "(ns chapter_one.core)\\r\\n\\r\\n; Takes the average of some numbers\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n; Read a string and return a literal\\r\\n(read-string \\"42\\")\\r\\n\\r\\n; Read a string a return a string literal\\r\\n(pr-str [1 2 3])\\r\\n\\r\\n; Declare a string literal\\r\\n\\"hello world\!\\"\\r\\n\\r\\n; Declare a multiline string literal\\r\\n\\"multiline stings\\r\\nare easy to declare\\"\\r\\n\\r\\n; Declare some character literal\\r\\n(class \\\\c) ;\= java.lang.Character\\r\\n\\\\u00ff ;\= \\\\\u00FF\\r\\n\\\\o41 ;\= \\\\\!\\r\\n\\r\\n; Declare a keyword which evaluates to itself\\r\\n(def person {\:name \\"Jacob Malter\\"\\r\\n             \:city \\"Raleigh, NC\\"})\\r\\n\\r\\n; Declare two keywords with the same name but in different namespaces\\r\\n(def calzones {\:name \\"DP Dough\\"\\r\\n               \:location \\"Raleigh, NC\\"\\r\\n               \:\:location \\"35.779385, -78.675592\\"}) ; every tuesday\\r\\n\\r\\n; Declare a regex\\r\\n(def regex \#\\"(\\\\d+)-(\\\\d+)\\")\\r\\n(class regex)\\r\\n(re-seq regex \\"1-3\\")\\r\\n\\r\\n; Use the reader macro\\r\\n(read-string \\"(+ 1 2 \#_(* 2 2) 8)\\")" "; Use comment\\r\\n(comment (println \\"hello\\"))" "(ns chapter_one.core)\\r\\n\\r\\n; Takes the average of some numbers\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n; Read a string and return a literal\\r\\n(read-string \\"42\\")\\r\\n\\r\\n; Read a string a return a string literal\\r\\n(pr-str [1 2 3])\\r\\n\\r\\n; Declare a string literal\\r\\n\\"hello world\!\\"\\r\\n\\r\\n; Declare a multiline string literal\\r\\n\\"multiline stings\\r\\nare easy to declare\\"\\r\\n\\r\\n; Declare some character literal\\r\\n(class \\\\c) ;\= java.lang.Character\\r\\n\\\\u00ff ;\= \\\\\u00FF\\r\\n\\\\o41 ;\= \\\\\!\\r\\n\\r\\n; Declare a keyword which evaluates to itself\\r\\n(def person {\:name \\"Jacob Malter\\"\\r\\n             \:city \\"Raleigh, NC\\"})\\r\\n\\r\\n; Declare two keywords with the same name but in different namespaces\\r\\n(def calzones {\:name \\"DP Dough\\"\\r\\n               \:location \\"Raleigh, NC\\"\\r\\n               \:\:location \\"35.779385, -78.675592\\"}) ; every tuesday\\r\\n\\r\\n; Declare a regex\\r\\n(def regex \#\\"(\\\\d+)-(\\\\d+)\\")\\r\\n(class regex)\\r\\n(re-seq regex \\"1-3\\")\\r\\n\\r\\n\\r\\n; Use the reader macro\\r\\n(read-string \\"(+ 1 2 \#_(* 2 2) 8)\\")\\r\\n\\r\\n; Use comment\\r\\n(comment (println \\"hello\\"))\\r\\n\\r\\n; Demonstrate the commas evaluate to whitespace\\r\\n(\= [1 2 3] [1, 2, 3])" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:chapter_one.core/location calzones) \\"35.779385, -78.675592\\"))))\\r\\n\\r\\n; Check that comma evalues to whitespace\\r\\n(deftest comma-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= ([1 2 3] [,,1,,, 2,, 3,,,,,,]))))" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:chapter_one.core/location calzones) \\"35.779385, -78.675592\\"))))\\r\\n\\r\\n; Check that comma evalues to whitespace\\r\\n(deftest comma-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= ([1 2 3] [1, 2, 3])))))" "(comma-test)" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:chapter_one.core/location calzones) \\"35.779385, -78.675592\\"))))\\r\\n\\r\\n; Check that comma evalues to whitespace\\r\\n(deftest comma-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= [1 2 3] [1, 2, 3]))))" "(comma-test)" "(ns chapter_one.core-test\\r\\n  (\:require [clojure.test \:refer \:all]\\r\\n            [chapter_one.core \:refer \:all]))\\r\\n\\r\\n; Check that the average of [60 80 100 400] is 160\\r\\n(deftest average-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (average [60 80 100 400]) 160))))\\r\\n\\r\\n; Check that read-string returns a literal\\r\\n(deftest read-string-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (read-string \\"42\\") 42))))\\r\\n\\r\\n; Check that pr-str returns a string\\r\\n(deftest pr-str-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (pr-str [1 2 3]) \\"[1 2 3]\\"))))\\r\\n\\r\\n; Check that a keyword is properly declared\\r\\n(deftest keyword-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:name person) \\"Jacob Malter\\"))))\\r\\n\\r\\n; Check that there is naming collision\\r\\n(deftest namespace-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= (\:chapter_one.core/location calzones) \\"35.779385, -78.675592\\"))))\\r\\n\\r\\n; Check that comma evalues to whitespace\\r\\n(deftest comma-test\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= [1 2 3] [,,,1, 2,,, ,,,, 3,,,,,,,,,,,,,,]))))" "(comma-test)" "(ns chapter_one.core)\\r\\n\\r\\n; Takes the average of some numbers\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n; Read a string and return a literal\\r\\n(read-string \\"42\\")\\r\\n\\r\\n; Read a string a return a string literal\\r\\n(pr-str [1 2 3])\\r\\n\\r\\n; Declare a string literal\\r\\n\\"hello world\!\\"\\r\\n\\r\\n; Declare a multiline string literal\\r\\n\\"multiline stings\\r\\nare easy to declare\\"\\r\\n\\r\\n; Declare some character literal\\r\\n(class \\\\c) ;\= java.lang.Character\\r\\n\\\\u00ff ;\= \\\\\u00FF\\r\\n\\\\o41 ;\= \\\\\!\\r\\n\\r\\n; Declare a keyword which evaluates to itself\\r\\n(def person {\:name \\"Jacob Malter\\"\\r\\n             \:city \\"Raleigh, NC\\"})\\r\\n\\r\\n; Declare two keywords with the same name but in different namespaces\\r\\n(def calzones {\:name \\"DP Dough\\"\\r\\n               \:location \\"Raleigh, NC\\"\\r\\n               \:\:location \\"35.779385, -78.675592\\"}) ; every tuesday\\r\\n\\r\\n; Declare a regex\\r\\n(def regex \#\\"(\\\\d+)-(\\\\d+)\\")\\r\\n(class regex)\\r\\n(re-seq regex \\"1-3\\")\\r\\n\\r\\n\\r\\n; Use the reader macro\\r\\n(read-string \\"(+ 1 2 \#_(* 2 2) 8)\\")\\r\\n\\r\\n; Use comment\\r\\n(comment (println \\"hello\\"))\\r\\n\\r\\n; Demonstrate the commas evaluate to whitespace\\r\\n(\= [1 2 3] [1, 2, 3])\\r\\n\\r\\n; Show off literal data structure\\r\\n'(a b \:name 12.5) ;; list\\r\\n['a 'b \:name 12.5] ;; vector\\r\\n{\:name \\"Chas\\" \:age 31} ;; map\\r\\n\#{1 2 3} ;; set" "(ns chapter_one.core)\\r\\n\\r\\n; Takes the average of some numbers\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n; Read a string and return a literal\\r\\n(read-string \\"42\\")\\r\\n\\r\\n; Read a string a return a string literal\\r\\n(pr-str [1 2 3])\\r\\n\\r\\n; Declare a string literal\\r\\n\\"hello world\!\\"\\r\\n\\r\\n; Declare a multiline string literal\\r\\n\\"multiline stings\\r\\nare easy to declare\\"\\r\\n\\r\\n; Declare some character literal\\r\\n(class \\\\c) ;\= java.lang.Character\\r\\n\\\\u00ff ;\= \\\\\u00FF\\r\\n\\\\o41 ;\= \\\\\!\\r\\n\\r\\n; Declare a keyword which evaluates to itself\\r\\n(def person {\:name \\"Jacob Malter\\"\\r\\n             \:city \\"Raleigh, NC\\"})\\r\\n\\r\\n; Declare two keywords with the same name but in different namespaces\\r\\n(def calzones {\:name \\"DP Dough\\"\\r\\n               \:location \\"Raleigh, NC\\"\\r\\n               \:\:location \\"35.779385, -78.675592\\"}) ; every tuesday\\r\\n\\r\\n; Declare a regex\\r\\n(def regex \#\\"(\\\\d+)-(\\\\d+)\\")\\r\\n(class regex)\\r\\n(re-seq regex \\"1-3\\")\\r\\n\\r\\n\\r\\n; Use the reader macro\\r\\n(read-string \\"(+ 1 2 \#_(* 2 2) 8)\\")\\r\\n\\r\\n; Use comment\\r\\n(comment (println \\"hello\\"))\\r\\n\\r\\n; Demonstrate the commas evaluate to whitespace\\r\\n(\= [1 2 3] [1, 2, 3])\\r\\n\\r\\n; Show off literal data structure\\r\\n'(a b \:name 12.5) ;; list\\r\\n['a 'b \:name 12.5] ;; vector\\r\\n{\:name \\"Jacob\\" \:age 20} ;; map\\r\\n\#{1 2 3} ;; set\\r\\n\\r\\n; define a variable\\r\\n(def x 1)" "(ns chapter_one.core)\\r\\n\\r\\n; Takes the average of some numbers\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n; Read a string and return a literal\\r\\n(read-string \\"42\\")\\r\\n\\r\\n; Read a string a return a string literal\\r\\n(pr-str [1 2 3])\\r\\n\\r\\n; Declare a string literal\\r\\n\\"hello world\!\\"\\r\\n\\r\\n; Declare a multiline string literal\\r\\n\\"multiline stings\\r\\nare easy to declare\\"\\r\\n\\r\\n; Declare some character literal\\r\\n(class \\\\c) ;\= java.lang.Character\\r\\n\\\\u00ff ;\= \\\\\u00FF\\r\\n\\\\o41 ;\= \\\\\!\\r\\n\\r\\n; Declare a keyword which evaluates to itself\\r\\n(def person {\:name \\"Jacob Malter\\"\\r\\n             \:city \\"Raleigh, NC\\"})\\r\\n\\r\\n; Declare two keywords with the same name but in different namespaces\\r\\n(def calzones {\:name \\"DP Dough\\"\\r\\n               \:location \\"Raleigh, NC\\"\\r\\n               \:\:location \\"35.779385, -78.675592\\"}) ; every tuesday\\r\\n\\r\\n; Declare a regex\\r\\n(def regex \#\\"(\\\\d+)-(\\\\d+)\\")\\r\\n(class regex)\\r\\n(re-seq regex \\"1-3\\")\\r\\n\\r\\n\\r\\n; Use the reader macro\\r\\n(read-string \\"(+ 1 2 \#_(* 2 2) 8)\\")\\r\\n\\r\\n; Use comment\\r\\n(comment (println \\"hello\\"))\\r\\n\\r\\n; Demonstrate the commas evaluate to whitespace\\r\\n(\= [1 2 3] [1, 2, 3])\\r\\n\\r\\n; Show off literal data structure\\r\\n'(a b \:name 12.5) ;; list\\r\\n['a 'b \:name 12.5] ;; vector\\r\\n{\:name \\"Jacob\\" \:age 20} ;; map\\r\\n\#{1 2 3} ;; set\\r\\n\\r\\n; define a variable\\r\\n(def x 1)\\r\\nx" "(ns chapter_one.core)\\r\\n\\r\\n; Takes the average of some numbers\\r\\n(defn average\\r\\n  [numbers]\\r\\n  (/ (apply + numbers) (count numbers)))\\r\\n\\r\\n; Read a string and return a literal\\r\\n(read-string \\"42\\")\\r\\n\\r\\n; Read a string a return a string literal\\r\\n(pr-str [1 2 3])\\r\\n\\r\\n; Declare a string literal\\r\\n\\"hello world\!\\"\\r\\n\\r\\n; Declare a multiline string literal\\r\\n\\"multiline stings\\r\\nare easy to declare\\"\\r\\n\\r\\n; Declare some character literal\\r\\n(class \\\\c) ;\= java.lang.Character\\r\\n\\\\u00ff ;\= \\\\\u00FF\\r\\n\\\\o41 ;\= \\\\\!\\r\\n\\r\\n; Declare a keyword which evaluates to itself\\r\\n(def person {\:name \\"Jacob Malter\\"\\r\\n             \:city \\"Raleigh, NC\\"})\\r\\n\\r\\n; Declare two keywords with the same name but in different namespaces\\r\\n(def calzones {\:name \\"DP Dough\\"\\r\\n               \:location \\"Raleigh, NC\\"\\r\\n               \:\:location \\"35.779385, -78.675592\\"}) ; every tuesday\\r\\n\\r\\n; Declare a regex\\r\\n(def regex \#\\"(\\\\d+)-(\\\\d+)\\")\\r\\n(class regex)\\r\\n(re-seq regex \\"1-3\\")\\r\\n\\r\\n\\r\\n; Use the reader macro\\r\\n(read-string \\"(+ 1 2 \#_(* 2 2) 8)\\")\\r\\n\\r\\n; Use comment\\r\\n(comment (println \\"hello\\"))\\r\\n\\r\\n; Demonstrate the commas evaluate to whitespace\\r\\n(\= [1 2 3] [1, 2, 3])\\r\\n\\r\\n; Show off literal data structure\\r\\n'(a b \:name 12.5) ;; list\\r\\n['a 'b \:name 12.5] ;; vector\\r\\n{\:name \\"Jacob\\" \:age 20} ;; map\\r\\n\#{1 2 3} ;; set\\r\\n\\r\\n; define a variable\\r\\n(def x 1)\\r\\nx ;\= 1\\r\\n\\r\\n; Demonstrate what eval does\\r\\n(eval \:foo) ;\= \:foo\\r\\n(eval [1 2 3]) ;\= [1 2 3]\\r\\n(eval \\"text\\") ;\= \\"text\\""]
eclipse.preferences.version=1
